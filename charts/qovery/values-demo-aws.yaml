services:
  qovery:
    qovery-cluster-agent:
      enabled: true
    qovery-shell-agent:
      enabled: true
    qovery-engine:
      enabled: true
    qovery-priority-class:
      enabled: true
  ingress:
    ingress-nginx:
      enabled: true
  dns:
    external-dns:
      enabled: true
  logging:
    loki:
      enabled: true
    promtail:
      enabled: true
  certificates:
    cert-manager:
      enabled: true
    cert-manager-configs:
      enabled: true
    qovery-cert-manager-webhook:
      enabled: true
  observability:
    metrics-server:
      enabled: true
  aws:
    q-storageclass-aws:
      enabled: true
    aws-ebs-csi-driver:
      enabled: false
    aws-load-balancer-controller:
      enabled: false
  gcp:
    q-storageclass-gcp:
      enabled: false
  scaleway:
    q-storageclass-scaleway:
      enabled: false
qovery:
  clusterId: &clusterId set-by-customer
  clusterShortId: &clusterShortId set-by-customer
  organizationId: &organizationId set-by-customer
  jwtToken: &jwtToken set-by-customer
  rootDomain: &rootDomain set-by-customer
  domain: &domain set-by-customer
  domainWildcard: &domainWildcard set-by-customer
  qoveryDnsUrl: &qoveryDnsUrl set-by-customer
  agentGatewayUrl: &agentGatewayUrl set-by-customer
  engineGatewayUrl: &engineGatewayUrl set-by-customer
  lokiUrl: &lokiUrl set-by-customer
  promtailLokiUrl: &promtailLokiUrl set-by-customer
  acmeEmailAddr: &acmeEmailAddr set-by-customer
  externalDnsPrefix: &externalDnsPrefix set-by-customer
  architectures: &architectures set-by-customer
  engineVersion: &engineVersion set-by-customer
  shellAgentVersion: &shellAgentVersion set-by-customer
  clusterAgentVersion: &clusterAgentVersion set-by-customer
qovery-cluster-agent:
  fullnameOverride: qovery-shell-agent
  image:
    tag: *clusterAgentVersion
  environmentVariables:
    CLUSTER_ID: *clusterId
    CLUSTER_JWT_TOKEN: *jwtToken
    GRPC_SERVER: *agentGatewayUrl
    LOKI_URL: *lokiUrl
    ORGANIZATION_ID: *organizationId
  useSelfSignCertificate: true
qovery-shell-agent:
  fullnameOverride: qovery-shell-agent
  image:
    tag: *shellAgentVersion
  environmentVariables:
    CLUSTER_ID: *clusterId
    CLUSTER_JWT_TOKEN: *jwtToken
    GRPC_SERVER: *agentGatewayUrl
    ORGANIZATION_ID: *organizationId
qovery-engine:
  image:
    tag: *engineVersion
  engineResources: null
  buildContainer:
    environmentVariables:
      BUILDER_CPU_ARCHITECTURES: *architectures
      BUILDER_ROOTLESS_ENABLED: 'true'
  environmentVariables:
    CLUSTER_ID: *clusterId
    CLUSTER_JWT_TOKEN: *jwtToken
    DOCKER_HOST: tcp://0.0.0.0:2375
    GRPC_SERVER: *engineGatewayUrl
    LIB_ROOT_DIR: /home/qovery/lib
    ORGANIZATION_ID: *organizationId
ingress-nginx:
  controller:
    useComponentLabel: true
    admissionWebhooks:
      enabled: true # set-by-customer
    allowSnippetAnnotations: true
    # enable if you want metrics scrapped by prometheus
    metrics:
      enabled: true # set-by-customer
      serviceMonitor:
        enabled: false # set-by-customer
    config:
      # set global default file size limit to 100m
      proxy-body-size: 100m
      # hide Nginx version
      server-tokens: "false"
      # required for X-Forwarded-for to work with ALB controller
      use-proxy-protocol: "false"
      # enable real IP (client IP)
      enable-real-ip: "false" # set-by-customer
      # passes the incoming X-Forwarded-* headers to upstreams
      use-forwarded-headers: "false" # set-by-customer
      # append the remote address to the X-Forwarded-For header instead of replacing it
      compute-full-forwarded-for: "false" # set-by-customer
      # customize http-snippet
      # customize log-format / set-by-customer
      # default format can be found in the template: https://github.com/nginxinc/kubernetes-ingress/blob/v3.5.2/internal/configs/version1/nginx.tmpl#L44
      # nginx_controller_log_format_upstream can be a json that why we pass it in the value file
      log-format-escaping-json: "false" # set-by-customer
      log-format-escaping-none: "false" # set-by-customer
      limit-req-status-code: "503" # set-by-customer
    # PDB
    maxUnavailable: 20%
    ingressClassResource:
      # -- Name of the IngressClass
      name: nginx-qovery
      # -- Create the IngressClass or not
      enabled: true
    # the Ingress Class name to be used by Ingresses (use "nginx-qovery" for Qovery application/container deployments)
    ingressClass: nginx-qovery
    extraArgs:
      # Kubernetes path of the default Cert-manager TLS certificate (if used)
      default-ssl-certificate: "qovery/letsencrypt-acme-qovery-cert"
    updateStrategy:
      rollingUpdate:
        # AWS LB is slow to catchup change in the topology, so we go 1 by 1 to not have any downtime
        maxSurge: 1
        maxUnavailable: 0
    # AWS LB is slow to catchup change in the topology, so we go slowly to let AWS catchup change before moving to the next instance
    # LB healthcheck is 6, and need 2 rounds to consider the instance as (un)healthy. Double the time to be safe
    readinessProbe:
      initialDelaySeconds: 30
    # enable autoscaling if you want to scale the number of replicas based on CPU usage
    autoscaling:
      enabled: false # set-by-customer
      minReplicas: 2 # set-by-customer
      maxReplicas: 25 # set-by-customer
      targetCPUUtilizationPercentage: 50 # set-by-customer
    # required if you rely on a load balancer
    # the controller mirrors the address of this service's endpoints to the load-balancer status of all Ingress objects it satisfies.
    publishService:
      enabled: true
    # set a load balancer if you want your Nginx to be publicly accessible
    service:
      enabled: true
      annotations:
        # Qovery is in a migration process to ALB controller, we advice to use it
        service.beta.kubernetes.io/aws-load-balancer-type: nlb
        # service.beta.kubernetes.io/aws-load-balancer-type: "external"
        # service.beta.kubernetes.io/aws-load-balancer-scheme": "internet-facing"
        # service.beta.kubernetes.io/aws-load-balancer-name: "qovery-<short-cluster-id>-nginx-ingress",
        # service.beta.kubernetes.io/aws-load-balancer-proxy-protocol": "*",
        # service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip",
        # service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true",
        # service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: "target_health_state.unhealthy.connection_termination.enabled=false,target_health_state.unhealthy.draining_interval_seconds=300",
        # service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "10",
        # Qovery managed DNS requieres *.$domain (something like: *.<cluster_id>.<given_dns_name>)
        external-dns.alpha.kubernetes.io/hostname: *domainWildcard
      externalTrafficPolicy: "Local"
      sessionAffinity: ""
      healthCheckNodePort: 0
    # force a connection for 30 seconds before shutting down, to avoid exiting too early
    # and let time to AWS LB to catchup change in the topology
    # When /wait-shutdown is called, the LB healthcheck /healthz endpoint return an error, but nginx keep processing request
    lifecycle:
      preStop:
        exec:
          command:
            - sh
            - -c
            - (sleep 30 | nc localhost 80)&  sleep 1 ; /wait-shutdown
    topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: nginx-ingress
            app.kubernetes.io/component: controller
        topologyKey: kubernetes.io/hostname
        maxSkew: 1
        whenUnsatisfiable: DoNotSchedule
external-dns:
  fullnameOverride: external-dns
  provider: pdns
  domainFilters: [*rootDomain]
  txtOwnerId: *clusterShortId
  txtPrefix: *externalDnsPrefix
  annotationFilter: "external-dns.alpha.kubernetes.io/exclude notin (true)"
  pdns:
    apiUrl: *qoveryDnsUrl
    apiKey: *jwtToken
    apiPort: 443
promtail:
  fullnameOverride: promtail
  namespace: qovery
  priorityClassName: qovery-high-priority
  config:
    clients:
      - url: *promtailLokiUrl
    snippets:
      extraRelabelConfigs:
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(qovery_com_service_id|qovery_com_service_type|qovery_com_environment_id)
  # GCP only allows /var/log/xxx to be mounted as hostPath
  defaultVolumes:
    - hostPath:
        path: /var/log/pods
      name: pods
    - emptyDir: {}
      name: run
  defaultVolumeMounts:
    - mountPath: /var/log/pods
      name: pods
      readOnly: true
    - mountPath: /run/promtail
      name: run
loki:
  fullnameOverride: loki
  loki:
    auth_enabled: false
    ingester:
      lifecycler:
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1
    schema_config:
      configs:
        - from: 2020-05-15
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
  monitoring:
    dashboards:
      enabled: false
    rules:
      enabled: false
    serviceMonitor:
      enabled: false
      metricsInstance:
        enabled: false
    selfMonitoring:
      enabled: false
      grafanaAgent:
        installOperator: false
    grafanaAgent:
      enabled: false
    lokiCanary:
      enabled: false
  test:
    enabled: false
  gateway:
    enabled: false
  singleBinary:
    replicas: 1
    persistence:
      enabled: false
    extraVolumes:
      - name: data
        emptyDir: {}
      - name: storage
        emptyDir: {}
    extraVolumeMounts:
      - name: data
        mountPath: /data
      - name: storage
        mountPath: /var/loki
cert-manager:
  fullnameOverride: cert-manager
  global:
    leaderElection:
      namespace: qovery
  installCRDs: true
  replicaCount: 1
  startupapicheck:
    jobAnnotations:
      helm.sh/hook: post-install,post-upgrade
    rbac:
      annotations:
        helm.sh/hook: post-install,post-upgrade
    serviceAccount:
      annotations:
        helm.sh/hook: post-install,post-upgrade
qovery-cert-manager-webhook:
  fullnameOverride: qovery-cert-manager-webhook
  certManager:
    namespace: qovery
    serviceAccountName: cert-manager
  secret:
    apiUrl: *qoveryDnsUrl
    apiKey: *jwtToken
cert-manager-configs:
  fullnameOverride: cert-manager-configs
  externalDnsProvider: pdns # Qovery DNS
  namespace: "qovery"
  managedDns: [*domain]
  acme:
    letsEncrypt:
      emailReport: *acmeEmailAddr
      # set the Let's Encrypt URL
      # Test: https://acme-staging-v02.api.letsencrypt.org/directory
      # Prod: 
      acmeUrl: https://acme-v02.api.letsencrypt.org/directory
  provider:
    pdns:
      apiPort: "443"
      apiUrl: *qoveryDnsUrl
      apiKey: *jwtToken
metrics-server:
  # create api service to be able to use hpa/vpa
  apiService:
    create: true
  # set rolling restart strategy
  updateStrategy:
    type: RollingUpdate # set-by-customer
  # set resources
  resources:
    limits:
      cpu: 250m # set-by-customer
      memory: 64Mi # set-by-customer
    requests:
      cpu: 250m # set-by-customer
      memory: 64Mi # set-by-customer
  
